1. Which registers contain arguments to functions? For example, which register holds 13 in main's call to printf?
    a0-a7, a2
2. Where is the call to function f in the assembly code for main? Where is the call to g? (Hint: the compiler may inline functions.)
    nowhere, complier optimization by inline function, g(x) is inlined by f(x), f(g(x)) is inlined by main()
    replace "f(8) + 1 " as 12
3. At what address is the function printf located?
    "auipc	ra,0x0"pc:0x30, "jalr  1528(ra)": fuction printf-->0x628(0x5F8+0x30)
4. What value is in the register ra just after the jalr to printf in main?
    The jalr instruction also stores the address of the next instruction 
    (that is, the value of the current PC plus the length of the jalr instruction, 
    which is 0x30 + 4 = 0x34) in the ra register
5. Run the following code:
	unsigned int i = 0x00646c72;
	printf("H%x Wo%s", 57616, &i);     
What is the output? 
The output depends on that fact that the RISC-V is little-endian.
If the RISC-V were instead big-endian what would you set i to in order to yield the same output? 
Would you need to change 57616 to a different value
    Big and little endian order just change how multibyte data is stored in memory.
    57616->0xe110     little-endian: 72 6c 64 00   output: He110 world
    57616 needn"t change    big-endian:  72 6c 64 00    so i = 0x726c6400  
6. In the following code, what is going to be printed after 'y='? 
(note: the answer is not a specific value.) Why does this happen?    printf("x=%d y=%d", 3);
    y = the value of a2 register